import asyncio
import logging
import sys

from aiogram import F, Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from pydantic import BaseModel

from config import settings

from faststream.rabbit import RabbitBroker


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dp = Dispatcher()
bot = Bot(
    token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

broker = RabbitBroker(host=settings.RABBIT_HOST, port=settings.RABBIT_PORT)


# --- –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Rabbit ---
class TgData(BaseModel):
    tg_id: int
    text: str


# --- –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –±—Ä–æ–∫–µ—Ä–∞ ---
@broker.subscriber("notification")
async def notification_user(data: TgData):
    await bot.send_message(chat_id=data.tg_id, text=data.text)
    logging.info("-> notification")


@broker.subscriber("output_agent")
async def output_agent_messages(data: TgData):
    await bot.send_message(chat_id=data.tg_id, text=data.text)
    logging.info("-> output_agent")


# --- /start ---
@dp.message(CommandStart())
async def handle_start(msg: Message):
    logging.info(f"User {msg.chat.id} started bot")
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AI-–∞–≥–µ–Ω—Ç–∞ –ñ–ö–•</b>!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∂–∏–ª—å—è.\n\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help"
    )


# --- /help ---
@dp.message(Command("help"))
async def handle_help(msg: Message):
    await msg.answer(
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/support ‚Äì –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "/all ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π\n"
        "/end ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π\n"
        "/current id ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—é\n"
        "/delete id ‚Äì —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–Ω–æ–≤–æ–µ')"
    )


# --- /info ---
@dp.message(Command("info"))
async def handle_info(msg: Message):
    await msg.answer(
        "‚ÑπÔ∏è <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∂–∏—Ç–µ–ª—è–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è "
        "–Ω–∞ –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.\n\n"
        "‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –í—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã).\n"
        "2. AI-–∞–≥–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É.\n"
        "3. –ì–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞–º —Å—é–¥–∞."
    )


# --- /support ---
@dp.message(Command("support"))
async def handle_support(msg: Message):
    await msg.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "‚úâÔ∏è Email: support@example.com\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67"
    )


# --- /all ---
@dp.message(Command("all"))
async def handle_all(msg: Message):
    # üîπ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Rabbit / –ë–î
    await msg.answer(
        "üìë <b>–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>:\n\n"
        "1. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10 (—Å—Ç–∞—Ç—É—Å: –Ω–æ–≤–æ–µ)\n"
        "2. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä. –ú–∏—Ä–∞, 25 (—Å—Ç–∞—Ç—É—Å: –≤ —Ä–∞–±–æ—Ç–µ)\n"
        "3. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 5 (—Å—Ç–∞—Ç—É—Å: –∑–∞–≤–µ—Ä—à–µ–Ω–æ)"
    )


# --- /end ---
@dp.message(Command("end"))
async def handle_end(msg: Message):
    # üîπ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Rabbit / –ë–î
    await msg.answer(
        "‚úÖ <b>–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>:\n\n"
        "3. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 5 (–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ)"
    )


# --- /current <id> ---
@dp.message(Command("current"))
async def handle_current(msg: Message):
    parts = msg.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /current 3")
        return

    app_id = int(parts[1])
    # üîπ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Rabbit / –ë–î
    await msg.answer(
        f"üìå <b>–ó–∞—è–≤–ª–µ–Ω–∏–µ #{app_id}</b>\n\n"
        "üë§ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
        "üè† –ê–¥—Ä–µ—Å: —É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 5\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67\n"
        "üìß Email: ivan@example.com\n\n"
        "üìã –°—Ç–∞—Ç—É—Å: –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        "üìë –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ"
    )


# --- /delete <id> ---
@dp.message(Command("delete"))
async def handle_delete(msg: Message):
    parts = msg.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete 4")
        return

    app_id = int(parts[1])
    # üîπ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Rabbit / –ë–î
    status = "–Ω–æ–≤–æ–µ"  # –ø—Ä–∏–º–µ—Ä

    if status != "–Ω–æ–≤–æ–µ":
        await msg.answer(f"‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ ‚Ññ{app_id} –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (—Å—Ç–∞—Ç—É—Å: {status})")
    else:
        await msg.answer(f"üóë –ó–∞—è–≤–ª–µ–Ω–∏–µ ‚Ññ{app_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")


@dp.message(F.text)
async def send_agent(message: Message):
    tg_id = message.chat.id
    text = message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text} ({tg_id})")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Rabbit
    await broker.publish(
        {"tg_id": tg_id, "text": text},
        queue="input_agent",
        content_type="application/json",
    )
    logging.info("input_agent ->")
    # await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã AI-–∞–≥–µ–Ω—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")


# --- –ó–∞–ø—É—Å–∫ ---
async def main() -> None:
    async with broker:
        logging.info("–ë—Ä–æ–∫–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
        await broker.start()
        await dp.start_polling(bot)
    logging.info("–í—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å...")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
